{"version":3,"sources":["components/SongCard.js","components/ArtCard.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","card","width","background","media","height","SongCard","props","classes","react_default","a","createElement","Card","boxShadow","className","CardContent","Typography","gutterBottom","align","variant","color","component","title","artist","margin","ArtCard","CardActionArea","CardMedia","image","art","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","song","time","fetch","mode","response","json","console","log","setState","item","name","artists","album","images","url","duration_ms","progress_ms","_this2","getData","interval","setInterval","clearInterval","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mUAOMA,EAAYC,YAAW,CAC3BC,KAAM,CACJC,MAAO,IACPC,WAAY,4CAEdC,MAAO,CACLC,OAAQ,OAIG,SAASC,EAASC,GAC/B,IAAMC,EAAUT,IAEhB,OACEU,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,UAAW,EAAGC,UAAWN,EAAQP,MACnCQ,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAYC,cAAY,EAACC,MAAM,OAAOC,QAAQ,KAAKC,MAAM,cAAcC,UAAU,MAC9Ed,EAAMe,OAETb,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAYE,MAAM,OAAOC,QAAQ,QAAQC,MAAM,gBAAgBC,UAAU,KACtEd,EAAMgB,8BCpBbxB,EAAYC,YAAW,CAC3BC,KAAM,CACJC,MAAO,IACPC,WAAY,qDACZqB,OAAQ,IAEVpB,MAAO,CACLC,OAAQ,OAIG,SAASoB,EAAQlB,GAC9B,IAAMC,EAAUT,IAEhB,OACEU,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,UAAW,EAAGC,UAAWN,EAAQP,MACrCQ,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACEjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CACEb,UAAWN,EAAQJ,MACnBwB,MAAOrB,EAAMsB,YC+BRC,cAnDb,SAAAA,EAAYvB,GAAO,IAAAwB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM3B,KAED+B,MAAQ,CACXC,KAAM,GACNhB,OAAQ,GACRM,IAAK,GACLW,KAAM,GAPST,yMAYMU,MAAM,mBAAoB,CAAEC,KAAM,0BAAnDC,kBACaA,EAASC,cAAtBA,SACNC,QAAQC,IAAIF,GACZV,KAAKa,SAAS,CACZR,KAAMK,EAAKI,KAAKC,KAChB1B,OAAQqB,EAAKI,KAAKE,QAAQ,GAAGD,KAC7BpB,IAAKe,EAAKI,KAAKG,MAAMC,OAAO,GAAGC,IAC/Bb,KAAOI,EAAKI,KAAKM,YAAcV,EAAKW,4JAIpB,IAAAC,EAAAtB,KAClBA,KAAKuB,UACLvB,KAAKwB,SAAWC,YAAY,WACvBH,EAAKlB,MAAME,MAAQ,EACpBgB,EAAKC,UAGLD,EAAKT,SAAS,CAAEP,KAAMgB,EAAKlB,MAAME,KAAO,KAEzC,kDAIHoB,cAAc1B,KAAKwB,2CAInB,OACEjD,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,cAChBL,EAAAC,EAAAC,cAACc,EAAD,CAASI,IAAKK,KAAKI,MAAMT,MACzBpB,EAAAC,EAAAC,cAACL,EAAD,CAAUgB,MAAOY,KAAKI,MAAMC,KAAMhB,OAAQW,KAAKI,MAAMf,OAAQiB,KAAMN,KAAKI,MAAME,gBA7CtEqB,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.00af3004.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport { shadows } from '@material-ui/system';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  card: {\n    width: 300,\n    background: 'linear-gradient(35deg, #A2E5D5, #FDFDFD)'\n  },\n  media: {\n    height: 300,\n  },\n});\n\nexport default function SongCard(props) {\n  const classes = useStyles();\n\n  return (\n    <Card boxShadow={2} className={classes.card}>\n        <CardContent>\n          <Typography gutterBottom align=\"left\" variant=\"h5\" color=\"textPrimary\" component=\"h2\">\n            {props.title}\n          </Typography>\n          <Typography align=\"left\" variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            {props.artist}\n          </Typography>\n        </CardContent>\n    </Card>\n  );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport { shadows } from '@material-ui/system';\nimport CardMedia from '@material-ui/core/CardMedia';\n\nconst useStyles = makeStyles({\n  card: {\n    width: 300,\n    background: 'linear-gradient(45deg, #A2E5D5 100%, #FDFDFD 100%)',\n    margin: 15\n  },\n  media: {\n    height: 300,\n  },\n});\n\nexport default function ArtCard(props) {\n  const classes = useStyles();\n\n  return (\n    <Card boxShadow={2} className={classes.card}>\n      <CardActionArea>\n        <CardMedia\n          className={classes.media}\n          image={props.art}\n        />\n      </CardActionArea>\n    </Card>\n  );\n}","import React from 'react';\nimport './App.css';\nimport SongCard from './components/SongCard'\nimport ArtCard from './components/ArtCard'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { \n      song: \"\",\n      artist: \"\",\n      art: \"\",\n      time: 1\n    }\n  }\n\n  async getData() {\n    const response = await fetch('/spotify/current', { mode: \"no-cors\"})\n    const json = await response.json();\n    console.log(json)\n    this.setState({ \n      song: json.item.name, \n      artist: json.item.artists[0].name, \n      art: json.item.album.images[1].url, \n      time: (json.item.duration_ms - json.progress_ms)\n    })\n  }\n\n  componentDidMount() {\n    this.getData();\n    this.interval = setInterval(() => {\n      if(this.state.time <= 1) { \n        this.getData()\n      }\n      else {\n        this.setState({ time: this.state.time - 7 })\n      }\n    }, 1);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <ArtCard art={this.state.art} />\n          <SongCard title={this.state.song} artist={this.state.artist} time={this.state.time} />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}